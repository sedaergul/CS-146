/**
 * As a way to understand how a "black box" is used to solve problems, this program
 * determines the largest possible clique in a graph and answers whether such a graph exist. The Graph
 * class and methods are already provided and the assignment only requires
 * writing one method: findMax(Graph g)
 * The program returns an array of booleans which vertices that exist in the clique are marked as
 * true while other vertices are marked as false. The vertices are numbered starting at 0.
 *
 * An imaginary Graph class provides the following methods:
 * 		int size() - This returns the number of vertices in a graph.
 *		Graph remove (int index) - This method does not necessarily "remove" the vertex at that index; 
 					   it returns a copy of the graph that does not include the vertex at the 
					   index as well as any edges attatched to the vertex. Keep in mind that 
					   the vertices shift accordingly.
 *		boolean has(int size) - This method determines if a clique of the given size exists in the graph. 
 */
public class Utility {
	/**
	 * @param g
	 * @return max
	 */
	public static boolean[] findMax(Graph g) {
		boolean[] max = new boolean[g.size()]; // boolean array that will be returned.

		Graph t = g;
		int size = g.size();

		while (size > 0 && !g.has(size)) { // calculates the largest clique size in the graph
			size--; // and uses that size to find that clique
		}

		int shift = 0;

		for (int i = 0; i < g.size(); i++) {
			t = g.remove(shift);

			if (!t.has(size)) {
				t = g;
				
				max[i] = true;
				
				shift++; // since graph does not change and we need to move onto the next vertex
			}		
			
			else {
				g = t; // "removes" the vertex that is not part of the clique and turns that into the new graph. 
			}
		}

		return max;
	}
}
